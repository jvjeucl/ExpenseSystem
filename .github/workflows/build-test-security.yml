name: Build, Test, and Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: List repository contents
        run: |
          echo "Current directory: $(pwd)"
          echo "Repository files:"
          ls -la
          echo "Looking for solution files:"
          find . -name "*.sln"
          
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x

      - name: Restore dependencies
        run: dotnet restore ExpenseSystem.sln

      - name: Build
        run: dotnet build ExpenseSystem.sln --no-restore

      #- name: Test
      #  run: dotnet test --no-build --verbosity normal
  
  security_scan:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      # 1. Code Review (Touchpoint #1)
      - name: Run Security Code Scan
        run: |
          dotnet tool install --global security-scan
          security-scan ExpenseSystem.sln --export=results.sarif
        continue-on-error: true

      - name: Upload scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
      
      # 2. Architectural Risk Analysis (Touchpoint #2)
#      - name: OWASP Dependency Check
#        uses: dependency-check/Dependency-Check_Action@main
#        with:
#          project: 'ExpenseSystem'
#          path: '.'
#          format: 'HTML'
#          out: 'reports'
#
#      - name: Upload dependency check report
#        uses: actions/upload-artifact@v3
#        with:
#          name: dependency-check-report
#          path: reports
      
      # 3. Penetration Testing & 4. Risk-based Security Tests (Touchpoints #3 & #4)
#      - name: Setup Security Testing
#        run: |
#          dotnet new xunit -n ExpenseSystem.SecurityTests
#          dotnet add ExpenseSystem.SecurityTests/ExpenseSystem.SecurityTests.csproj reference ExpenseSystem.API/ExpenseSystem.API.csproj
#          dotnet add ExpenseSystem.SecurityTests/ExpenseSystem.SecurityTests.csproj package FluentAssertions
#      
#      # Add sample security tests
#      - name: Create Security Tests
#        run: |
#          cat > ExpenseSystem.SecurityTests/SecurityBasicTests.cs << 'EOL'
#          using System;
#          using System.Net.Http;
#          using System.Threading.Tasks;
#          using FluentAssertions;
#          using Xunit;
#          
#          namespace ExpenseSystem.SecurityTests
#          {
#              public class SecurityBasicTests
#              {
#                  [Fact]
#                  public async Task ExpensesController_SQL_Injection_Should_Be_Mitigated()
#                  {
#                      // Arrange
#                      // Actual implementation would set up a test server and client
#          
#                      // Act
#                      // Would send a malicious SQL payload
#                      // var response = await client.PostAsync("api/expenses/search", content);
#          
#                      // Assert
#                      // response.StatusCode.Should().NotBe(System.Net.HttpStatusCode.InternalServerError);
#          
#                      // Placeholder assertion for the example
#                      true.Should().BeTrue();
#                  }
#              }
#          }
#          EOL
#          
#          dotnet test ExpenseSystem.SecurityTests/ExpenseSystem.SecurityTests.csproj