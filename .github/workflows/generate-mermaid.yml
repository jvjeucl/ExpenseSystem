name: Generate Mermaid Diagram

on:
  workflow_call:
    inputs:
      code_status:
        description: "Status for Code Analysis"
        required: true
        type: string
        default: "pending"
      architecture_risk_status:
        description: "Status for Architecture Risks"
        required: true
        type: string
        default: "pending"
      penetration_testing_status:
        description: "Status for Penetration Testing"
        required: true
        type: string
        default: "pending"
      risk_based_status:
        description: "Status for Risk-Based Security Testing"
        required: true
        type: string
        default: "pending"
      abuse_case_status:
        description: "Status for Abuse Cases"
        required: true
        type: string
        default: "pending"
      security_requirements_status:
        description: "Status for Security Requirements"
        required: true
        type: string
        default: "pending"
      security_operations_status:
        description: "Status for Security Operations"
        required: true
        type: string
        default: "pending"
  workflow_dispatch:
    code_status:
      description: "Status for Code Analysis"
      required: true
      type: string
      default: "pending"
    architecture_risk_status:
      description: "Status for Architecture Risks"
      required: true
      type: string
      default: "pending"
    penetration_testing_status:
      description: "Status for Penetration Testing"
      required: true
      type: string
      default: "pending"
    risk_based_status:
      description: "Status for Risk-Based Security Testing"
      required: true
      type: string
      default: "pending"
    abuse_case_status:
      description: "Status for Abuse Cases"
      required: true
      type: string
      default: "pending"
    security_requirements_status:
      description: "Status for Security Requirements"
      required: true
      type: string
      default: "pending"
    security_operations_status:
      description: "Status for Security Operations"
      required: true
      type: string
      default: "pending"
jobs:
  generate-diagram:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Mermaid Diagram
        run: |
          # Opret Mermaid diagram koden
          DIAGRAM="graph TD
          n1[\"Pending\"]---n2[\"Success\"]---n3[\"Error\"]
          n1:::pending
          n2:::success
          n3:::error
          A[Code Analysis]:::${{ inputs.code_status }} -->B[Architecture Risks]:::${{ inputs.architecture_risk_status }}
          B -->C[Penetration Testing]:::${{ inputs.penetration_testing_status }}
          C -->D[Risk-Based Security Testing]:::${{ inputs.risk_based_status }}
          D -->E[Abuse Cases]:::${{ inputs.abuse_case_status }}
          E -->F[Security Requirements]:::${{ inputs.security_requirements_status }}
          F -->G[Security Operations]:::${{ inputs.security_operations_status }}
          
          classDef success fill:#9ff089,stroke:#237804,stroke-width:2px,rx:10px,ry:10px;
          classDef error fill:#ff7b7b,stroke:#8c0000,stroke-width:2px,rx:10px,ry:10px;
          classDef pending fill:#ffdb6d,stroke:#b59b01,stroke-width:2px,rx:10px,ry:10px;"
          
          # Konverter til base64
          ENCODED_DIAGRAM=$(echo "$DIAGRAM" | base64 -w 0)
          
          # Hent SVG fra mermaid.ink
          curl -s "https://mermaid.ink/svg/$ENCODED_DIAGRAM" -o diagram.svg
          
          # Hent også PNG versionen
          curl -s "https://mermaid.ink/img/$ENCODED_DIAGRAM" -o diagram.png
          
          # Opret også Markdown-fil til visning
          echo "# Software Security Touchpoints Status
          
          ![Software Security Touchpoints Status](diagram.svg)
          
          *Diagram automatisk genereret baseret på status fra CI/CD pipeline.*" > security-touchpoints.md

      - name: Commit diagram to repository
        run: |
          # Opret docs mappe hvis den ikke eksisterer
          mkdir -p docs/images
          
          # Kopier diagrammer til docs mappen (sørg for at filerne eksisterer)
          if [ -f diagram.svg ]; then
          cp diagram.svg docs/images/
          else
          echo "Advarsel: diagram.svg findes ikke"
          fi
          
          if [ -f diagram.png ]; then
          cp diagram.png docs/images/
          else
          echo "Advarsel: diagram.png findes ikke"
          fi
          
          # Også kopier markdown-filen hvis den eksisterer
          if [ -f security-touchpoints.md ]; then
          cp security-touchpoints.md docs/
          fi
          
          # Sæt git konfiguration
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          
          # Konfigurer repository URL med token
          git remote set-url origin https://x-access-token:${{ github.token }}@github.com/${{ github.repository }}
          
          # Hent seneste ændringer for at undgå konflikter
          git fetch origin
          git pull --rebase origin ${{ github.ref_name }}
          
          # Check om filerne eksisterer i docs-mappen før vi tilføjer dem
          GIT_FILES_TO_ADD=""
          if [ -f docs/images/diagram.svg ]; then
          GIT_FILES_TO_ADD="$GIT_FILES_TO_ADD docs/images/diagram.svg"
          fi
          
          if [ -f docs/images/diagram.png ]; then
          GIT_FILES_TO_ADD="$GIT_FILES_TO_ADD docs/images/diagram.png"
          fi
          
          if [ -f docs/security-touchpoints.md ]; then
          GIT_FILES_TO_ADD="$GIT_FILES_TO_ADD docs/security-touchpoints.md"
          fi
          
          # Kun commit hvis der er filer at tilføje
          if [ -n "$GIT_FILES_TO_ADD" ]; then
          git add $GIT_FILES_TO_ADD
          git commit -m "Opdateret software security status diagram"
          git push origin HEAD:${{ github.ref_name }}
          else
          echo "Ingen filer at committe"
          exit 1
          fi